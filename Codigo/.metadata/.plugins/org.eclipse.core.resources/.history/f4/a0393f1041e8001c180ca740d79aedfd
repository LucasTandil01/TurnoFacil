import java.util.ArrayList;



public class Sala extends ElementoSIS{

    private ArrayList<ElementoSIS> elementos;

    public Sala(){
        elementos = new ArrayList<>();
    }

    public void addElemento(ElementoSIS e){
        elementos.add(e);
    }

    public int totalCamas() {
        int contador = 0;
        for(ElementoSIS e:elementos) {
            contador += e.totalCamas();
        }
        return contador;
    }

   public ArrayList<Cama> getCamas(Paciente paciente) {
        ArrayList<Cama> camasQueCumplen = new ArrayList<>();

        for(ElementoSIS e:elementos)
            camasQueCumplen.addAll(e.getCamas(paciente));//DELEGA

        return camasQueCumplen;

    }

    public boolean tieneElementos(){
        return this.elementos.size() > 0;
    }

 
    public ElementoSIS getCopia(Criterio condicion) {
        Sala copia = new Sala();
        for (ElementoSIS e:elementos){
            ElementoSIS copiaHijo = e.getCopia(condicion);
            if (copiaHijo!=null)
                copia.addElemento(copiaHijo);
        }
        if (copia.tieneElementos()) //SI TIENE ALGUN ELEMENTO LO DEVUELVO SINO VACIO
            return copia;
        return null;
    }


    //ALTERNATIVA AL ANTERIOR QUE PRIMERO COPIO Y SI QUEDA ALGUNO CREO LA SALA
    public ElementoSIS getCopia2(Criterio condicion) {
        ArrayList<ElementoSIS> elementosCopiados = new ArrayList<>();
        for (ElementoSIS e:elementos){
            ElementoSIS copiaHijo = e.getCopia(condicion);
            if (copiaHijo!=null)
                elementosCopiados.add(copiaHijo);
        }
        if (elementosCopiados.size()>0) { //SI NO HAY NADA LO SACAMOS
            Sala copia = new Sala();
            for (ElementoSIS e:elementosCopiados){
                copia.addElemento(e);
            }
            return copia;
        }
        return null;
    }
}
